<!--
    divire

    Copyright (C) 2020 Aru Nanika

    This program is released under the MIT License.
    https://opensource.org/licenses/MIT
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:conv="clr-namespace:divire.Converters"
                    xmlns:ctrl="clr-namespace:divire.Controls"
                    >

    <!-- The theme font. -->
    <FontFamily x:Key="divireGlyphs">../Assets/#divireGlyphs</FontFamily>

    <!-- Common converters. -->
    <conv:ColorNameConverter x:Key="colorNameConverter"/>
    <conv:RadioButtonCheckedConverter x:Key="radioButtonConverter"/>
    <conv:BlendModeConverter x:Key="blendModeConverter"/>

    <!-- Definitions of theme colors. -->
    <SolidColorBrush x:Key="ThemeGrayBrush00Key" Color="#4d4d4d"/>
    <SolidColorBrush x:Key="ThemeGrayBrush01Key" Color="#424242"/>
    <SolidColorBrush x:Key="ThemeGrayBrush02Key" Color="#373737"/>
    <SolidColorBrush x:Key="ThemeGrayBrush03Key" Color="#2c2c2c"/>
    <SolidColorBrush x:Key="ThemeGrayBrush04Key" Color="#212121"/>
    <SolidColorBrush x:Key="ThemeGrayBrush05Key" Color="#161616"/>

    <SolidColorBrush x:Key="ThemeGlyphRegularBrushKey" Color="#eeeeee"/>

    <SolidColorBrush x:Key="MouseOverBrushKey" Color="#bcbcbc"/>
    <SolidColorBrush x:Key="PressedButtonBrushKey" Color="#f9f9f9"/>
    <SolidColorBrush x:Key="DisabledBackgroundBrushKey" Color="#424242"/>
    <SolidColorBrush x:Key="DisabledForegroundBrushKey" Color="#424242"/>
    <SolidColorBrush x:Key="DisabledCoveringBrushKey" Color="#424242"/>
    <SolidColorBrush x:Key="NonactiveBrushKey" Color="#a5a5a5"/>

    <SolidColorBrush x:Key="ThemeTabMouseOverBrushKey" Color="#7EB4EA"/>
    <SolidColorBrush x:Key="ThemeTabDisabledBrushKey" Color="#F0F0F0"/>

    <SolidColorBrush x:Key="IndicatorBrushKey" Color="#aaaaaa"/>
    
    <!-- Style of MainWindow. -->
    <Style x:Key="MainWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Foreground" Value="{StaticResource ThemeGlyphRegularBrushKey}"/>
        <Setter Property="Background" Value="{StaticResource ThemeGrayBrush00Key}"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome ResizeBorderThickness="4"
                              CaptionHeight="60"/>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            >
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style of TabItem. -->
    <Style x:Key="ThemeTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource ThemeGlyphRegularBrushKey}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="6,2,6,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="12"/>
                        </Grid.ColumnDefinitions>

                        <Grid x:Name="templateRoot"
                              Grid.Column="0"
                              SnapsToDevicePixels="true"
                              >
                            <Border x:Name="mainBorder"
                                    BorderThickness="0"
                                    Background="{TemplateBinding Background}"
                                    Margin="-3,-3,-3,0"
                                    >
                            </Border>

                            <ContentPresenter x:Name="contentPresenter"
                                              ContentSource="Header"
                                              Focusable="False"
                                              Margin="14,8,14,3"
                                              RecognizesAccessKey="True"
                                              TextBlock.FontFamily="{StaticResource divireGlyphs}"
                                              TextBlock.FontSize="33"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                              />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="0"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource ThemeGrayBrush01Key}"/>
                            <Setter Property="Foreground" Value="{StaticResource NonactiveBrushKey}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource MouseOverBrushKey}"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true">
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource ThemeGrayBrush02Key}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style of buttons. -->
    <Style x:Key="ThemeButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource ThemeGrayBrush03Key}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource ThemeGlyphRegularBrushKey}"/>
        <Setter Property="FontFamily" Value="{StaticResource divireGlyphs}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true"
                            >
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource MouseOverBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource PressedButtonBrushKey}"/>
                            <Setter Property="Foreground" Value="{StaticResource ThemeGrayBrush03Key}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrushKey}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style of CheckBox.-->
    <Style x:Key="ThemeCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle"  Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{StaticResource ThemeGrayBrush00Key}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot"
                          Background="Transparent"
                          TextBlock.FontFamily="{StaticResource divireGlyphs}"
                          SnapsToDevicePixels="True"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Border x:Name="checkBoxBorder"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{StaticResource ThemeGlyphRegularBrushKey}"
                                Margin="0,0,0,2"
                                >
                            <Grid x:Name="markGrid">
                                <TextBlock x:Name="optionMark"
                                           Text="&#x2713;"
                                           Foreground="{StaticResource ThemeGrayBrush00Key}"
                                           FontSize="15"
                                           Margin="3,3,3,0"
                                           Opacity="0"
                                           />
                            </Grid>
                        </Border>
                        
                        <ContentPresenter x:Name="contentPresenter"
                                          Grid.Column="1"
                                          Focusable="False"
                                          VerticalAlignment="Center"
                                          TextBlock.FontSize="18"
                                          TextBlock.Foreground="{StaticResource ThemeGlyphRegularBrushKey}"
                                          Margin="12,0,0,0"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding BorderBrush, ElementName=checkBoxBorder}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style of RadioButton.-->
    <Style x:Key="ThemeRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource ThemeGrayBrush03Key}"/>
        <Setter Property="Foreground" Value="{StaticResource ThemeGlyphRegularBrushKey}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot"
                          Background="Transparent"
                          SnapsToDevicePixels="True"
                          >

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Grid Width="18"
                              Height="18">
                            <Ellipse x:Name="baseEllipse"
                                     Fill="{StaticResource ThemeGlyphRegularBrushKey}"
                                     Width="18"
                                     Height="18"
                                     VerticalAlignment="Center"
                                     HorizontalAlignment="Center"
                                     />

                            <Ellipse x:Name="optionMark"
                                     Fill="{StaticResource ThemeGrayBrush00Key}"
                                     Width="12"
                                     Height="12"
                                     VerticalAlignment="Center"
                                     HorizontalAlignment="Center"
                                     Opacity="0"
                                     />
                        </Grid>

                        <ContentPresenter x:Name="contentPresenter"
                                          Grid.Column="1"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="12,2,0,0"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center"
                                          TextBlock.FontFamily="{StaticResource divireGlyphs}"
                                          TextBlock.FontSize="18"
                                          TextBlock.Foreground="{StaticResource ThemeGlyphRegularBrushKey}"
                                          />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource ThemeGrayBrush03Key}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="baseEllipse" Value="{StaticResource ThemeGrayBrush00Key}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{StaticResource ThemeGrayBrush00Key}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style of ToggleButton in ComboBox.-->
    <Style x:Key="ThemeComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{StaticResource ThemeGrayBrush03Key}"
                            SnapsToDevicePixels="true"
                            >
                        <Border x:Name="splitBorder"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                HorizontalAlignment="Right"
                                SnapsToDevicePixels="true"
                                Width="32"
                                >
                            <TextBlock HorizontalAlignment="Center"
                                       Margin="0,5,0,0"
                                       Text="&#x02C5;"
                                       TextBlock.FontFamily="{StaticResource divireGlyphs}"
                                       TextBlock.FontSize="18"
                                       TextBlock.Foreground="{StaticResource ThemeGlyphRegularBrushKey}"
                                       />
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ThemeGrayBrush03Key}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource MouseOverBrushKey}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Template of ComboBox.-->
    <ControlTemplate x:Key="ThemeComboBoxTemplate" TargetType="{x:Type ComboBox}">

        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="18"/>
            </Grid.ColumnDefinitions>

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin="1"
                   PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom"
                   >
                <Decorator x:Name="shadow"
                           MaxHeight="{TemplateBinding MaxDropDownHeight}"
                           MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                           >
                    <Border x:Name="dropDownBorder"
                            BorderThickness="0"
                            Background="{StaticResource ThemeGlyphRegularBrushKey}"
                            >
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid"
                                  RenderOptions.ClearTypeHint="Enabled"
                                  >
                                <Canvas x:Name="canvas"
                                        HorizontalAlignment="Left"
                                        Height="0"
                                        VerticalAlignment="Top"
                                        Width="0"
                                        >
                                    <Rectangle x:Name="opaqueRect"
                                               Fill="{Binding Background, ElementName=dropDownBorder}"
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                               />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Decorator>
            </Popup>

            <ToggleButton x:Name="toggleButton"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}"
                          Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ThemeComboBoxToggleButton}"
                          />

            <ContentPresenter x:Name="contentPresenter"
                              Margin="8,8,0,0"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsHitTestVisible="false"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              TextBlock.FontFamily="{StaticResource divireGlyphs}"
                              TextBlock.FontSize="18"
                              TextBlock.Foreground="{StaticResource ThemeGlyphRegularBrushKey}"
                              />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Style of ComboBox.-->
    <Style x:Key="ThemeComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource ThemeGrayBrush05Key}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ThemeComboBoxTemplate}"/>
    </Style>

    <!--Storyboards for the waiting indicator-->
    <Storyboard x:Key="StoryboardExit">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         To="0.0"
                         Duration="0:0:0.1"
                         BeginTime="0:0:0.0"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard00">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.0"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard01">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.08"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard02">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.16"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard03">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.24"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard04">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.32"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard05">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.40"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard06">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.48"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard07">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.56"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard08">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.64"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard09">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.72"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard10">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.80"
                         />
    </Storyboard>

    <Storyboard x:Key="Storyboard11">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="1.0"
                         To="0.0"
                         Duration="0:0:0.96"
                         RepeatBehavior="Forever"
                         BeginTime="0:0:0.88"
                         />
    </Storyboard>

</ResourceDictionary>